package gui;

import javax.swing.*;
import java.awt.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Date;

import pitchDetector.*;
import misc.*;
import misc.InstrumentInfo.*;

public class LunarTunerGui extends javax.swing.JFrame {
	static private LunarTunerGui m_instance = new LunarTunerGui();
        static private ImageIcon m_icon = null;
	
	private LunarTunerGui() {
            initComponents();
            loadInstruments();
            loadInstrumentNotes();
	}

	static public LunarTunerGui getInstance() {
		return m_instance;
	}
	
	static public void setPitchError(double err) {
		Graphics2D g = (Graphics2D)m_instance.m_lblMeter.getGraphics();
		ImageIcon icon = (ImageIcon)m_instance.m_lblMeter.getIcon();
		
		err = 1.0f - err;
		
		int errPix = icon.getIconHeight() / 2 + (int)err;
		if (errPix > icon.getIconHeight()) {
			errPix = icon.getIconHeight() - 1;
		}
		else
		if (errPix < 0) {
			errPix = 0;
		}
		
		g.drawImage(icon.getImage(), 0, 0, icon.getIconWidth(), icon.getIconHeight(), m_instance);
		g.setPaint(Color.RED);
		g.fillRect(0, errPix, icon.getIconWidth(), 2);
	}
	
	static public void setNoteHeard(String txt) {
		m_instance.m_txtNoteHeard.setText(txt);
	}
	
	static public void setInstructions(String txt) {
		m_instance.m_txtInstructions.setText(txt);
	}
	
	private void loadInstruments() {
		InstrumentInfo.Instrument[] inst = InstrumentInfo.getInstance().getInstruments();
		
		m_cbInstrumentType.addItem(new Instrument());
		for (int i = 0; i < inst.length; ++i) {
			m_cbInstrumentType.addItem(inst[i]);
		}
		
		m_cbInstrumentType.setSelectedIndex(0);
	}
	
	private void loadInstrumentNotes() {
		Instrument inst = (InstrumentInfo.Instrument)m_cbInstrumentType.getSelectedItem();
		InstrumentNote[] notes = inst.getNotes();
		
		m_cbInstrumentNote.removeAllItems();
		for (int i = 0; i < notes.length; ++i) {
			m_cbInstrumentNote.addItem(notes[i]);
		}
		
		if (notes.length > 0) {
			m_cbInstrumentNote.setSelectedIndex(0);
		}
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel2 = new javax.swing.JPanel();
        m_lblMeter = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        m_txtNoteHeard = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        m_txtInstructions = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        m_cbInstrumentType = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        m_cbInstrumentNote = new javax.swing.JComboBox();
        m_btnPlayNote = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        m_chkNotify = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        m_cbNotifyInterval = new javax.swing.JComboBox();
        m_menuBar = new javax.swing.JMenuBar();
        m_menuFile = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("LunarTuner Version 0.1");
        setResizable(false);
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        m_lblMeter.setForeground(new java.awt.Color(255, 0, 0));
        m_lblMeter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/meter.gif")));
        m_lblMeter.getAccessibleContext().setAccessibleName("Meter");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(m_lblMeter)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(m_lblMeter)
        );
        jPanel2.getAccessibleContext().setAccessibleName("Meter Container");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Status")));
        jPanel1.setName("Status");
        jLabel1.setText("Note Heard");

        m_txtNoteHeard.setEditable(false);
        m_txtNoteHeard.getAccessibleContext().setAccessibleName("Note Heard");

        jLabel2.setText("Instructions");

        m_txtInstructions.setEditable(false);
        m_txtInstructions.getAccessibleContext().setAccessibleName("Instructions");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jLabel2)
                .addContainerGap())
            .add(m_txtInstructions, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jLabel1)
                .addContainerGap())
            .add(m_txtNoteHeard, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(m_txtNoteHeard, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(m_txtInstructions, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1.getAccessibleContext().setAccessibleName("Status");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Instrument"));
        jLabel3.setText("Type");

        m_cbInstrumentType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_cbInstrumentTypeActionPerformed(evt);
            }
        });

        m_cbInstrumentType.getAccessibleContext().setAccessibleName("Instrument Type");

        jLabel4.setText("Note");

        m_cbInstrumentNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_cbInstrumentNoteActionPerformed(evt);
            }
        });

        m_cbInstrumentNote.getAccessibleContext().setAccessibleName("Instrument Note");

        m_btnPlayNote.setText("Play Note");
        m_btnPlayNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_btnPlayNoteActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(m_cbInstrumentNote, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(m_cbInstrumentType, 0, 278, Short.MAX_VALUE)))
                    .add(m_btnPlayNote))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(m_cbInstrumentType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(m_cbInstrumentNote, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(m_btnPlayNote))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Notify Settings"));
        m_chkNotify.setText("Enable Notify");
        m_chkNotify.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        m_chkNotify.setMargin(new java.awt.Insets(0, 0, 0, 0));
        m_chkNotify.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                m_chkNotifyStateChanged(evt);
            }
        });

        jLabel5.setText("Notify Interval in Seconds");
        jLabel5.getAccessibleContext().setAccessibleParent(jLabel4);

        m_cbNotifyInterval.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15" }));
        m_cbNotifyInterval.setSelectedIndex(0);
        m_cbNotifyInterval.setName("Notify Interval in Seconds");
        m_cbNotifyInterval.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                m_cbNotifyIntervalItemStateChanged(evt);
            }
        });

        m_cbNotifyInterval.getAccessibleContext().setAccessibleName("Notify Interval in Seconds");
        m_cbNotifyInterval.getAccessibleContext().setAccessibleParent(jLabel4);

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(m_chkNotify)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jLabel5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(m_cbNotifyInterval, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 86, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .addContainerGap(102, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(m_chkNotify)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(m_cbNotifyInterval, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        m_menuFile.setText("File");
        m_menuBar.add(m_menuFile);

        setJMenuBar(m_menuBar);
        m_menuBar.getAccessibleContext().setAccessibleName("Menu Bar");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel3, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void m_cbNotifyIntervalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_m_cbNotifyIntervalItemStateChanged
        setIntervalNotifyLength((m_cbNotifyInterval.getSelectedIndex()+2) * 1000);
    }//GEN-LAST:event_m_cbNotifyIntervalItemStateChanged

   private void m_chkNotifyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_m_chkNotifyStateChanged
        setIntervalNotifyEnabled(m_chkNotify.isSelected());
   }//GEN-LAST:event_m_chkNotifyStateChanged
	
   private void m_cbInstrumentTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_cbInstrumentTypeActionPerformed
		loadInstrumentNotes();
   }//GEN-LAST:event_m_cbInstrumentTypeActionPerformed
	
   private void m_cbInstrumentNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_cbInstrumentNoteActionPerformed
		InstrumentNote note = (InstrumentNote)m_cbInstrumentNote.getSelectedItem();
		resetIntervalTimer();
                if (note != null) {
			UpdateLunarTuner.changeTuneNote(new PitchSample(note.getName(), note.getFreqIdx()));
		} else {
			UpdateLunarTuner.changeTuneNote(null);
		}
   }//GEN-LAST:event_m_cbInstrumentNoteActionPerformed
	
   private void m_btnPlayNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_btnPlayNoteActionPerformed
		InstrumentNote note = (InstrumentNote)m_cbInstrumentNote.getSelectedItem();
		if (note != null) {
			UpdateLunarTuner.playNote(new PitchSample(note.getName(), note.getFreqIdx()));
		}
   }//GEN-LAST:event_m_btnPlayNoteActionPerformed
	
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				LunarTunerGui.getInstance().setVisible(true);
			}
		});
		
		Thread updateThread = new Thread() {
			public void run() {
				UpdateLunarTuner.getInstance().updateLoop();
			}
		};
		updateThread.start();
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton m_btnPlayNote;
    private javax.swing.JComboBox m_cbInstrumentNote;
    private javax.swing.JComboBox m_cbInstrumentType;
    private javax.swing.JComboBox m_cbNotifyInterval;
    private javax.swing.JCheckBox m_chkNotify;
    private javax.swing.JLabel m_lblMeter;
    private javax.swing.JMenuBar m_menuBar;
    private javax.swing.JMenu m_menuFile;
    private javax.swing.JTextField m_txtInstructions;
    private javax.swing.JTextField m_txtNoteHeard;
    // End of variables declaration//GEN-END:variables

    /*
     * All the code below is related to the accessible INNTERVAL messages that
     * appear when interval notify is enabled.
     */

    // For the interval notifier
    static private JOptionPane m_jop = null;
    static private JDialog m_notifyWindow = null;
    private boolean m_intervalEnabled = false;
    private long m_intervalLength = 10000;
    private long m_intervalLastNotification = 0;

    private void resetIntervalTimer() {
        m_intervalLastNotification = new Date().getTime();
    }

    public static void updateIntervalTimer(String noteHeard, String noteError) {
            if (new Date().getTime() - m_instance.m_intervalLastNotification > m_instance.m_intervalLength
                            && m_instance.m_intervalEnabled) {
                    m_instance.throwMessageBox("I heard " + noteHeard + " with " + noteError);
                    m_instance.m_intervalLastNotification = new Date().getTime();
            }
    }

    private void setIntervalNotifyLength(int interval) {
            m_intervalLength = interval;
    }

    private void setIntervalNotifyEnabled(boolean enabled) {
           m_intervalEnabled = enabled;
           m_intervalLastNotification = new Date().getTime();
    }

    public static void updateInterval(String noteHeard, String noteError,
           String noteInstructions) {
            if (new Date().getTime() - m_instance.m_intervalLastNotification > m_instance.m_intervalLength
                            && m_instance.m_intervalEnabled) {
                   m_instance. m_intervalLastNotification = new Date().getTime();
                    m_instance.throwMessageBox(noteError + ". " + noteInstructions);
            }
    }

    private void throwMessageBox(String message) {
    	if(m_notifyWindow != null) {
    		m_notifyWindow.setVisible(false);
    	}
    	m_jop = new JOptionPane();
    	m_jop.setOptions(new Object[] {"Stop"});
        m_jop.setMessage(null);
        m_jop.addPropertyChangeListener(new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent evt) {
            	if(evt.getPropertyName().equals("value")) {
		        	setIntervalNotifyEnabled(false);
		            m_chkNotify.setSelected(false);
		            m_notifyWindow = null;
        		}
            }
        });
        m_notifyWindow = m_jop.createDialog(null,message);
        m_notifyWindow.setModal(false);
        m_notifyWindow.setVisible(true);
    }

}
